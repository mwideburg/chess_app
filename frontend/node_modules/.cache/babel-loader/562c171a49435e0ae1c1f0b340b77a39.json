{"ast":null,"code":"import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\nexport var RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport var RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport var RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport var RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\nexport var receiveCurrentUser = function receiveCurrentUser(currentUser) {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser: currentUser\n  };\n};\nexport var receiveUserSignIn = function receiveUserSignIn() {\n  return {\n    type: RECEIVE_USER_SIGN_IN\n  };\n};\nexport var receiveErrors = function receiveErrors(errors) {\n  return {\n    type: RECEIVE_SESSION_ERRORS,\n    errors: errors\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return {\n    type: RECEIVE_USER_LOGOUT\n  };\n};\nexport var signup = function signup(user) {\n  return function (dispatch) {\n    return APIUtil.signup(user).then(function () {\n      return dispatch(receiveUserSignIn());\n    }, function (err) {\n      return dispatch(receiveErrors(err.response.data));\n    });\n  };\n};\nexport var login = function login(user) {\n  return function (dispatch) {\n    return APIUtil.login(user).then(function (res) {\n      var token = res.data.token;\n      localStorage.setItem('jwtToken', token);\n      APIUtil.setAuthToken(token);\n      var decoded = jwt_decode(token);\n      dispatch(receiveCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch(receiveErrors(err.response.data));\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    localStorage.removeItem('jwtToken');\n    APIUtil.setAuthToken(false);\n    dispatch(logoutUser());\n  };\n};","map":{"version":3,"sources":["/Users/ross/Desktop/MTA_tracker/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_USER_SIGN_IN","receiveCurrentUser","currentUser","type","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","err","response","data","login","res","token","localStorage","setItem","setAuthToken","decoded","catch","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,WAAW;AAAA,SAAK;AAC9CC,IAAAA,IAAI,EAAEN,oBADwC;AAE9CK,IAAAA,WAAW,EAAXA;AAF8C,GAAL;AAAA,CAAtC;AAKP,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AACpCD,IAAAA,IAAI,EAAEH;AAD8B,GAAP;AAAA,CAA1B;AAIP,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM;AAAA,SAAK;AACpCH,IAAAA,IAAI,EAAEL,sBAD8B;AAEpCQ,IAAAA,MAAM,EAANA;AAFoC,GAAL;AAAA,CAA5B;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAO;AAC7BJ,IAAAA,IAAI,EAAEJ;AADuB,GAAP;AAAA,CAAnB;AAIP,OAAO,IAAMS,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,SAAI,UAAAC,QAAQ;AAAA,WAClCf,OAAO,CAACa,MAAR,CAAeC,IAAf,EAAqBE,IAArB,CAA0B;AAAA,aACtBD,QAAQ,CAACN,iBAAiB,EAAlB,CADc;AAAA,KAA1B,EAEG,UAAAQ,GAAG;AAAA,aACFF,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CADN;AAAA,KAFN,CADkC;AAAA,GAAZ;AAAA,CAAnB;AAQP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAN,IAAI;AAAA,SAAI,UAAAC,QAAQ;AAAA,WACjCf,OAAO,CAACoB,KAAR,CAAcN,IAAd,EAAoBE,IAApB,CAAyB,UAAAK,GAAG,EAAI;AAAA,UACpBC,KADoB,GACVD,GAAG,CAACF,IADM,CACpBG,KADoB;AAE5BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAtB,MAAAA,OAAO,CAACyB,YAAR,CAAqBH,KAArB;AACA,UAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B;AACAP,MAAAA,QAAQ,CAACT,kBAAkB,CAACoB,OAAD,CAAnB,CAAR;AACH,KAND,EAOCC,KAPD,CAOO,UAAAV,GAAG,EAAI;AACVF,MAAAA,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAR;AACH,KATD,CADiC;AAAA,GAAZ;AAAA,CAAlB;AAaP,OAAO,IAAMS,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAAAb,QAAQ,EAAI;AACpCQ,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA7B,IAAAA,OAAO,CAACyB,YAAR,CAAqB,KAArB;AACAV,IAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACH,GAJqB;AAAA,CAAf","sourcesContent":["import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\nexport const receiveCurrentUser = currentUser => ({\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n});\n\nexport const receiveUserSignIn = () => ({\n    type: RECEIVE_USER_SIGN_IN\n});\n  \nexport const receiveErrors = errors => ({\n    type: RECEIVE_SESSION_ERRORS,\n    errors\n});\n\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n});\n\nexport const signup = user => dispatch => (\n    APIUtil.signup(user).then(() => (\n        dispatch(receiveUserSignIn())\n    ), err => (\n        dispatch(receiveErrors(err.response.data))\n    ))\n);\n\nexport const login = user => dispatch => (\n    APIUtil.login(user).then(res => {\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n        APIUtil.setAuthToken(token);\n        const decoded = jwt_decode(token);\n        dispatch(receiveCurrentUser(decoded))\n    })\n    .catch(err => {\n        dispatch(receiveErrors(err.response.data));\n    })\n)\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem('jwtToken')\n    APIUtil.setAuthToken(false)\n    dispatch(logoutUser())\n};\n\n"]},"metadata":{},"sourceType":"module"}